{"ast":null,"code":"// import { createContext, useState, useEffect, useReducer } from \"react\";\n// const addCartItem = (cartItems, productToAdd) => {\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === productToAdd.id\n//   );\n//   if (existingCartItem) {\n//     return cartItems.map((cartItem) =>\n//       cartItem.id === productToAdd.id\n//         ? { ...cartItem, quantity: cartItem.quantity + 1 }\n//         : cartItem\n//     );\n//   }\n//   return [...cartItems, { ...productToAdd, quantity: 1 }];\n// };\n// const removeCartItem = (cartItems, productToRemove) => {\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === productToRemove.id\n//   );\n//   if (existingCartItem.quantity === 1) {\n//     return cartItems.filter((cartItem) => cartItem.id !== productToRemove.id);\n//   }\n//   return cartItems.map((cartItem) =>\n//     cartItem.id === productToRemove.id\n//       ? { ...cartItem, quantity: cartItem.quantity - 1 }\n//       : cartItem\n//   );\n// };\n// const deleteCartItem = (cartItems, productToRemove) => {\n//   return cartItems.filter((cartItem) => cartItem.id !== productToRemove.id);\n// };\n// export const CartContext = createContext({\n//   isCartOpen: false,\n//   setIsOpen: () => {},\n//   cartItems: [],\n//   addItemToCart: () => {},\n//   removeItemFromCart: () => {},\n//   deleteItemFromCart: () => {},\n//   cartCount: 0,\n//   cartTotal: 0,\n// });\n// export const CartProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n//   const {cartItems , cartCount , cartTotal , isCartOpen } = state; \n//   const updateCartItemsReducer = (newCartItems) => {\n//     const newCartTotal = newCartItems.reduce(\n//       (total, cartItems) => total + cartItems.price * cartItems.quantity,\n//       0\n//     );\n//     const newCartCount = newCartItems.reduce(\n//       (total, cartItems) => total + cartItems.quantity,\n//       0\n//     );\n//     dispatch({\n//       type: CART_ACTION_TYPE.SET_CART_ITEM,\n//       payload: {\n//         cartItems: newCartItems,\n//         cartCount: newCartCount,\n//         cartTotal: newCartTotal,\n//       },\n//     });\n//   };\n//   const removeItemFromCart = (product) => {\n//     const newCartItems = removeCartItem(cartItems, product);\n//     updateCartItemsReducer(newCartItems);\n//   };\n//   const addItemToCart = (product) => {\n//     const newCartItems = addCartItem(cartItems, product);\n//     updateCartItemsReducer(newCartItems);\n//   };\n//   const deleteItemFromCart = (product) => {\n//     const newCartItems = deleteCartItem(cartItems, product);\n//     updateCartItemsReducer(newCartItems);\n//   };\n//   const setIsCartOpen = (bool) => {\n//     dispatch({type : CART_ACTION_TYPE.SET_IS_CART_OPEN , payload : bool });\n//   }\n//   const value = {\n//     isCartOpen,\n//     setIsCartOpen,\n//     cartItems,\n//     addItemToCart,\n//     cartCount,\n//     cartTotal,\n//     removeItemFromCart,\n//     deleteItemFromCart,\n//   };\n//   return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n// };","map":{"version":3,"names":[],"sources":["/Users/prashantverma/Desktop/React/crwn-clothing/src/contexts/cart.context.jsx"],"sourcesContent":["// import { createContext, useState, useEffect, useReducer } from \"react\";\n\n// const addCartItem = (cartItems, productToAdd) => {\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === productToAdd.id\n//   );\n\n//   if (existingCartItem) {\n//     return cartItems.map((cartItem) =>\n//       cartItem.id === productToAdd.id\n//         ? { ...cartItem, quantity: cartItem.quantity + 1 }\n//         : cartItem\n//     );\n//   }\n\n//   return [...cartItems, { ...productToAdd, quantity: 1 }];\n// };\n\n// const removeCartItem = (cartItems, productToRemove) => {\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === productToRemove.id\n//   );\n\n//   if (existingCartItem.quantity === 1) {\n//     return cartItems.filter((cartItem) => cartItem.id !== productToRemove.id);\n//   }\n\n//   return cartItems.map((cartItem) =>\n//     cartItem.id === productToRemove.id\n//       ? { ...cartItem, quantity: cartItem.quantity - 1 }\n//       : cartItem\n//   );\n// };\n\n// const deleteCartItem = (cartItems, productToRemove) => {\n//   return cartItems.filter((cartItem) => cartItem.id !== productToRemove.id);\n// };\n\n// export const CartContext = createContext({\n//   isCartOpen: false,\n//   setIsOpen: () => {},\n//   cartItems: [],\n//   addItemToCart: () => {},\n//   removeItemFromCart: () => {},\n//   deleteItemFromCart: () => {},\n//   cartCount: 0,\n//   cartTotal: 0,\n// });\n\n// export const CartProvider = ({ children }) => {\n\n//   const [state, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n//   const {cartItems , cartCount , cartTotal , isCartOpen } = state; \n\n//   const updateCartItemsReducer = (newCartItems) => {\n//     const newCartTotal = newCartItems.reduce(\n//       (total, cartItems) => total + cartItems.price * cartItems.quantity,\n//       0\n//     );\n\n//     const newCartCount = newCartItems.reduce(\n//       (total, cartItems) => total + cartItems.quantity,\n//       0\n//     );\n\n//     dispatch({\n//       type: CART_ACTION_TYPE.SET_CART_ITEM,\n//       payload: {\n//         cartItems: newCartItems,\n//         cartCount: newCartCount,\n//         cartTotal: newCartTotal,\n//       },\n//     });\n\n//   };\n\n//   const removeItemFromCart = (product) => {\n//     const newCartItems = removeCartItem(cartItems, product);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const addItemToCart = (product) => {\n//     const newCartItems = addCartItem(cartItems, product);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const deleteItemFromCart = (product) => {\n//     const newCartItems = deleteCartItem(cartItems, product);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const setIsCartOpen = (bool) => {\n//     dispatch({type : CART_ACTION_TYPE.SET_IS_CART_OPEN , payload : bool });\n//   }\n\n//   const value = {\n//     isCartOpen,\n//     setIsCartOpen,\n//     cartItems,\n//     addItemToCart,\n//     cartCount,\n//     cartTotal,\n//     removeItemFromCart,\n//     deleteItemFromCart,\n//   };\n\n//   return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n// };\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}